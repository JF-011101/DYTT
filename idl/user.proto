syntax = "proto3";
package user;
option go_package = "github.com/jf-011101/dytt/grpc_gen/user";

message douyin_user_register_request {
    string username = 1; // 注册用户名，最长32个字符
    string password = 2; // 密码，最长32个字符
}

message douyin_user_register_response {
    int32 status_code = 1; // 状态码，0-成功，其他值-失败
    optional string status_msg = 2; // 返回状态描述
    int64 user_id = 3; // 用户id
    string token = 4; // 用户鉴权token
}

message douyin_user_request {
    int64 user_id = 1; // 用户id
    string token = 2; // 用户鉴权token
}

message douyin_user_response {
    int32 status_code = 1; // 状态码，0-成功，其他值-失败
    optional string status_msg = 2; // 返回状态描述
    User user = 3; // 用户信息
}
message douyin_user_query_request {
    Matrix query_data = 1; 
}
message douyin_user_query_response {
    int32 status_code = 1; // 状态码，0-成功，其他值-失败
    optional string status_msg = 2; // 返回状态描述
}

message douyin_user_refresh_request {
    optional string option_msg = 1; // 可选信息 
}

message douyin_user_refresh_response {
    int32 status_code = 1;
    Matrix data = 2; // “提示”
    State share_state = 3;
    Dbinfo db_info = 4;
    Params params =5;
    optional string status_msg = 6; // 返回状态描述
}

message User {
    int64 id = 1; // 用户id
    string name = 2; // 用户名称
    optional int64 follow_count = 3; // 关注总数
    optional int64 follower_count = 4; // 粉丝总数
    bool is_follow = 5; // true-已关注，false-未关注
}

message Matrix {
    uint64 rows = 1; 
    uint64 cols = 2; 
    repeated uint64 data = 3;
}

message State {
    uint64 rows = 1; 
    uint64 cols = 2; 
    repeated uint64 data = 3;
}

message Dbinfo {
    uint64 N = 1;
    uint64 row_length = 2;
    uint64 packing = 3;
    uint64 ne = 4;
    uint64 x = 5;
    uint64 p = 6;
    uint64 logq = 7;
    uint64 basis = 8;
    uint64 squishing = 9;
    uint64 cols = 10;
}

message Params {
    uint64 N =1;       // LWE secret dimension
	double Sigma=2;  // LWE error distribution stddev

	uint64 L =3;  // DB height
	uint64 M =4; // DB width

	uint64 Logq =5; // (logarithm of) ciphertext modulus
	uint64 P =6;    // plaintext modulus
}

service UserSrv{
    rpc Register (douyin_user_register_request) returns (douyin_user_register_response) {}
    rpc Login (douyin_user_register_request) returns (douyin_user_register_response) {}
    rpc GetUserById (douyin_user_request) returns (douyin_user_response) {}
    rpc QueryUser (douyin_user_query_request) returns (douyin_user_query_response) {}
    rpc Refresh (douyin_user_refresh_request) returns (douyin_user_refresh_response) {}
}
